utils package
    - we created classes that have methods which allow us to
      our previous tasks with excel / .properties files easier

Exceptions (try catch) (throw/throws)
    - Exception vs. Error: errors can't be handled like if the computer is out of memory,
      everything else that can actually be handled is an exception
    - Exceptions are runtime issues that stop the normal flow of the program
      and can suddenly terminate the program's execution
    - if the program crashes because one part of the code doesn't work, users
      will have experiences and its bad for business etc.

    - exceptions can occur for many reasons not just bad code

    - to avoid these issues, we have exception handling in java
    - prevents our program from crashing when there is an error on one specific part
      of the code but the rest of the code is just fine
    - allows us to explain errors in the class rather than the user seeing
      complex error messages
    - the mechanism for exception handling is to use try catch blocks
        - we put the problematic code inside the try{} and then provide the backup code
          inside the catch(){} where we can convert the error to simple text or it can
          have the code that could send a email to a developer/admin etc.
        - catch blocks are checked the same way if conditions are checked, top to bottom

        - you can also have nested try catch blocks for a plan c,d,e etc.

    - when we add exception to method signature (throws), we are assigning the responsibility of the
      error to someone else
        - when we use throws keyword, we are saying go back to where you got this class/method,
          and let that block of code fix it (You are telling java that the exception will be
          handled somewhere else in the code)
        - when we do this to the main method, we are basically tell the JVM to solve it because the main method
          is the top of the program, and when JVM can't solve it, it will close the application
            - JVM is the default exception handler but doesn't handle it well so its
              better that we write the try catch block

    - "throws" is used to declare an exception and is always followed by the method signature.
        - used to indicate that a method can throw an exception
    - "throw" is used to throw an exception explicitly
        - for ex: throw new NullPointerException();

    - Inside the catch brackets (catch(HERE)) we could just put "Exception" for all exceptions or
      luckily, java devs have already made certain classes if you want the try catch block to only
      work for specific exceptions like FileNotFoundException or NullPointerException etc.
        - "Exception" class is parent class for all other exception classes
    - you can write catch blocks like they're if conditions (else if this exception.. else if this exception...)
        - good practice is to make the first catch block an exception that we predict, and then one more catch block
          for all exceptions (using Exceptions class)

Finally
    - Finally block of code is used to place important code, it will be
      executed whether exception is handled or not. Unless there is a
      System.exit() code executed
    - For each try block there can be zero or more catch blocks,
      but only one finally block.
    - finally block is useful in situations like if you were testing a website in selenium
      and you have an exception, you could put driver.quit() in finally block so that you don't
      have several open browsers that ran into an exception when you run multiple test cases at once

Checked Exceptions

    - The exceptions that are mandatory to handle in code by providing try
      catch block and are outside the control of programmer are called
      checked exception they are forced by compiler.
    - these are 'checked' for at compile time

Unchecked Exceptions
    - The exceptions that are non mandatory to handle in code and are in the control
      of programmer and can be avoided by writing good code are called unchecked
      exception they are not forced by compiler.
    - for ex: System.out.println(10/0);
      because java would not force you to correct the code

Side stuff:
    - the out folder in the Project is byte code. This is the code that java feeds to the JVM
    - the code we type in java files compliles into the byte code, and then that code is fed to JVM
      which translates the byte code into something that the computer can actually understand.

    - learn about the finalize() method in Object class, popular interview question
        - it supposedly a bad practice ?

    - printStackTrace() method gives all the info for us to find and fix errors (most common)
    - getMessage() method gives you only the short description of the error
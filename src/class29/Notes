Sets (Set interface)

    Sets are a part of the Collections framework. Sets like HashSet, LinkedHashSet, and TreeSet
    DON'T ALLOW DUPLICATE VALUES. There are 3 main types of Sets.

HashSet

    HashSet doesn't allow duplicate values. and it doesn't maintain order.
    - most common Set
    - it's the fastest

    Note: wherever you see "hash" order of elements are not maintained.

LinkedHashSet

    LinkedHashSet DOES maintain order but its slower than HashSet

TreeSet

    TreeSet removes duplicate values and sorts the data but doesn't maintain order
    (different way of sorting based on the data type).
    - It's the slowest Set.

Maps (Map interface)

    Maps are NOT  a part of the collections framework so it has different methods for the same tasks for ex: instead
    of add() we now use put().

    Maps store data in the form of keys and values and those keys and values
    must be specified in the diamond operators
    when we create the object.
    - Think of the keys in a map is the same as the index in an array
    - Maps are not index based

    there is HashMap, LinkedHashMap, TreeMap

    - only difference between map and set is:
        - map is not in the collection framework
        - map stores data in keys and values

Note:
    - when we create objects. It's better to have the reference variable of the parent
      class type, and the object stored in the child class like this:
      Set<Students> s = new HashSet<>();

      this is because it's easier for us to achieve polymorphism this way and
      with this way we can also change the the child object easily.
